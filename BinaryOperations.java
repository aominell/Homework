package home_work1;
/*
1. Побитовые операции:
	1.1. http://developer.alexanderklimov.ru/android/java/bitwise.php
	1.2 Использовать ВСЕ возможные побитовые операции с числами 42 и 15.
	1.3 Использовать ВСЕ возможные побитовые операции с числами -42 и -15.
	1.4 В комментариях к каждой операции написать двоичный код каждого числа и результата операции.
	1.5 Попробуйте сделать побитовую операцию с числова 42.5
*/


public class BinaryOperations {

    public static void main(String[] args) {
        int a = 42;     //0010 1010
        int b = 15;     //0000 1111

        int c = a & b;  //0000 1010(8 + 2 = 10)
        c = a | b;      //0010 1111(32 + 8 + 4 + 2 + 1 = 47)
        c = a ^ b;      //0010 0101(32 + 4 + 1 = 37)

        c = ~a;         //1111 1111 1111 1111 1111 1111 1101 0101(-43)
        c = ~b;         //1111 1111 1111 1111 1111 1111 1111 0000(-16)

        c = a << b;     //0001 0101 0000 0000 0000 0000(42 * 2¹⁵ = 1_376_256)
        c = a << 3;     //0001 0101 0000(42 * 2³ = 336)
        c = b << 3;     //0111 1000(15 * 2³ = 120)

        c = a >> b;     //0 (т.к. все биты выходят за пределы видимости)
        c = a >> 3;     //0000 0101(5)
        c = b >> 3;     //0000 0001(1)

        c = a >>> b;    //0 (т.к. все биты выходят за пределы видимости)
        c = a >>> 2;    //0000 1010(10)


        a = -42;        //1111 1111 1111 1111 1111 1111 1101 0110
        b = -15;        //1111 1111 1111 1111 1111 1111 1111 0001

        c = a & b;      //1111 1111 1111 1111 1111 1111 1101 0000(-48)
        c = a | b;      //1111 1111 1111 1111 1111 1111 1111 0111(-9)
        c = a ^ b;      //0010 0111(39)

        c = ~a;         //0000 0000 0000 0000 0000 0000 0010 1001(41)
        c = ~b;         //0000 0000 0000 0000 0000 0000 0000 1110(14)

        c = a << b;     //1111 1111 1010 1100 0000 0000 0000 0000(-5505024)
        c = a >> b;     //1111 1111 1111 1111 1111 1111 1111 1111(-1)
        c = a >>> b;    //0111 1111 1111 1111(32767)

        //ошибка компиляции(не определён оператор для типа double)
        /*
        double l = 42.5;
        double k = l & b;
        k = l | b;
        k = l ^ b;
        k = ~l;
        k = ~b;
        k = l >> b;
        k = l << b;
        k = l >>> b;
         */
        //Решение:
        double l = 42.5;
        int power10 = 0;

        //Умножаем double на 10 до целого числа, сохраняем степень 10
        while (l % 1 != 0) {
            l *= 10;
            power10++;
        }

        long m = (long) l;
        //Проведение побитовых операций

        //Обратное преобразование
        l = m;
        while (power10 > 0) {
            l /= 10;
            power10--;
        }
    }
}

